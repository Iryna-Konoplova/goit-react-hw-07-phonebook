{"version":3,"sources":["components/ContactListItem/contactListItem.module.css","App.module.css","components/Filter/filter.module.css","components/ContactList/contactList.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","setNumber","handleChange","e","target","value","onSubmit","contactName","preventDefault","some","alert","contactsAction","className","styles","form","formLabel","formInput","type","pattern","title","required","onChange","buttonSubmit","ContactListItem","onDeletContact","contactListItem","buttonDelete","onClick","ContactList","contactList","map","Filter","filterLabel","filterInput","App","container","subtitle","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1ca1a821.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"contactListItem_contactListItem__1_75O\",\"contact\":\"contactListItem_contact__2I7vJ\",\"buttonDelete\":\"contactListItem_buttonDelete__1vePM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__AZINw\",\"title\":\"App_title__2H9NQ\",\"subtitle\":\"App_subtitle__1AxZA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__2gSq7\",\"filterInput\":\"filter_filterInput__J6lV5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"contactList_contactList__2gIKX\"};","// Модули\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n    payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n    }, \r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n// eslint-disable-next-line\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n\r\n\r\n\r\n// // Redux\r\n\r\n// import types from './contacts-types';\r\n// import shortid from 'shortid';\r\n\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name,\r\n//         number,\r\n//     },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value,\r\n// })\r\n\r\n// export default { addContact, deleteContact, changeFilter };","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};","// Модули\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsAction from \"../../redux/contacts/contacts-action\";\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Стили\r\nimport styles from '../ContactForm/ContactForm.module.css';\r\n\r\n\r\nexport default function ContactForm() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch()\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  const findByName = contactName => {\r\n    return contacts.some(({ name }) => name === contactName);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (findByName(name)) {\r\n      alert(`${name} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsAction.addContact({name, number}))\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      <label className={styles.formLabel}>\r\n        Name\r\n        <input\r\n          className={styles.formInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label className={styles.formLabel}>\r\n        Number\r\n        <input\r\n          className={styles.formInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={styles.buttonSubmit}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}","// Модули\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Стили\r\nimport styles from '../ContactListItem/contactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeletContact }) => {\r\n  return (\r\n  <li className={styles.contactListItem}>\r\n    <p className={styles.contact}>\r\n      {' '}\r\n      {name}: {number}\r\n    </p>\r\n    <button\r\n      className={styles.buttonDelete}\r\n      type=\"button\"\r\n      onClick={() => onDeletContact(id)}\r\n    >\r\n      Delete\r\n    </button>\r\n  </li>\r\n)};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeletContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;","// Модули\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// Компоненты\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport contactsAction from '../../redux/contacts/contacts-action';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Стили\r\nimport styles from '../ContactList/contactList.module.css';\r\n\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeletContact = id => dispatch(contactsAction.deleteContact(id))\r\n\r\n  return (\r\n  <ul className={styles.contactList}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <ContactListItem\r\n        key={id}\r\n        id={id}\r\n        name={name}\r\n        number={number}\r\n        onDeletContact={()=> onDeletContact(id)}\r\n      />\r\n    ))}\r\n  </ul>\r\n)};\r\n\r\n\r\nexport default ContactList;","// Модули\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsAction from '../../redux/contacts/contacts-action';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Стили\r\nimport styles from '../Filter/filter.module.css';\r\n\r\n\r\nconst Filter = () => {\r\n\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = e => dispatch(contactsAction.changeFilter(e.target.value))\r\n \r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\n\r\nexport default Filter;","// Компоненты\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\n\r\n// Стили\r\nimport styles from './App.module.css';\r\n\r\n\r\n// const defaultContacts = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1 className={styles.title}>Phonebook</h1>\r\n      <ContactForm  />\r\n      <h2 className={styles.subtitle}>Contacts</h2>\r\n      <Filter />  \r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// Модули\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n// Компоненты\r\nimport actions from './contacts-action'\r\n\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n});\r\n\r\n\r\n\r\n\r\n// Redux\r\n\r\n// import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload];\r\n        \r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload);\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return payload;\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n\r\n// export default combineReducers({\r\n//     items,\r\n//     filter\r\n// });\r\n","// Модули\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// Компоненты\r\nimport contactsReducers from './contacts/contacts-reduser';\r\n\r\n\r\nconst middleware = (getDefaultMiddleware) => getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n}).concat(logger);\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducers),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\n\r\n// eslint-disable-next-line\r\nexport default {store, persistor};\r\n\r\n\r\n\r\n\r\n// // Redux\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducers from './contacts/contacts-reduser';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducers,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: ''\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Модули\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\n// Компоненты\r\nimport App from './App';\r\nimport store from './redux/store'\r\n\r\n// Стили\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__18LPx\",\"formLabel\":\"ContactForm_formLabel__AYyAI\",\"formInput\":\"ContactForm_formInput__3qMXf\",\"buttonSubmit\":\"ContactForm_buttonSubmit__1jeln\"};"],"sourceRoot":""}